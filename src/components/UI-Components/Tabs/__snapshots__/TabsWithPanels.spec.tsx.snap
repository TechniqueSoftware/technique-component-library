// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TabsWithPanels should render a new content when clicking on tab 1`] = `
"<TabsWithPanels initialTab=\\"1\\" onTabChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [ [ '2' ] ], instances: [ undefined ], invocationCallOrder: [ 1 ], results: [ Object [Object: null prototype] { isThrow: false, value: undefined } ] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} tabAndPanelPropsList={{...}} tabsAriaLabel=\\"mockTestAriaLabel\\">
  <WithStyles(ForwardRef(Paper))>
    <ForwardRef(Paper) classes={{...}}>
      <div className=\\"MuiPaper-root MuiPaper-elevation1 MuiPaper-rounded\\">
        <WithStyles(ForwardRef(Tabs)) value=\\"2\\" onChange={[Function: handleTabChange]} aria-label=\\"mockTestAriaLabel\\" style={{...}}>
          <ForwardRef(Tabs) classes={{...}} value=\\"2\\" onChange={[Function: handleTabChange]} aria-label=\\"mockTestAriaLabel\\" style={{...}}>
            <div className=\\"MuiTabs-root\\" style={{...}}>
              <div className=\\"MuiTabs-scroller MuiTabs-fixed\\" style={{...}} onScroll={[Function: debounced] { clear: [Function (anonymous)] }}>
                <div aria-label=\\"mockTestAriaLabel\\" aria-labelledby={[undefined]} className=\\"MuiTabs-flexContainer\\" onKeyDown={[Function: handleKeyDown]} role=\\"tablist\\">
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-1\\" aria-controls=\\"1\\" value=\\"1\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-1\\" aria-controls=\\"1\\" value=\\"1\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-1\\" aria-controls=\\"1\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-1\\" aria-controls=\\"1\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={-1} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={false} id=\\"tab-1\\" aria-controls=\\"1\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-2\\" aria-controls=\\"2\\" value=\\"2\\" fullWidth={false} indicator={false} selected={true} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-2\\" aria-controls=\\"2\\" value=\\"2\\" fullWidth={false} indicator={false} selected={true} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit Mui-selected\\" role=\\"tab\\" aria-selected={true} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={0} id=\\"tab-2\\" aria-controls=\\"2\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit Mui-selected\\" role=\\"tab\\" aria-selected={true} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={0} id=\\"tab-2\\" aria-controls=\\"2\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={0} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={true} id=\\"tab-2\\" aria-controls=\\"2\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-3\\" aria-controls=\\"3\\" value=\\"3\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-3\\" aria-controls=\\"3\\" value=\\"3\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-3\\" aria-controls=\\"3\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-3\\" aria-controls=\\"3\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={-1} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={false} id=\\"tab-3\\" aria-controls=\\"3\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                </div>
                <WithStyles(ForwardRef(TabIndicator)) className=\\"MuiTabs-indicator\\" orientation=\\"horizontal\\" color=\\"secondary\\" style={{...}}>
                  <ForwardRef(TabIndicator) classes={{...}} className=\\"MuiTabs-indicator\\" orientation=\\"horizontal\\" color=\\"secondary\\" style={{...}}>
                    <span className=\\"PrivateTabIndicator-root-1 PrivateTabIndicator-colorSecondary-3 MuiTabs-indicator\\" style={{...}} />
                  </ForwardRef(TabIndicator)>
                </WithStyles(ForwardRef(TabIndicator))>
              </div>
            </div>
          </ForwardRef(Tabs)>
        </WithStyles(ForwardRef(Tabs))>
        <TabPanelContainer isActive={false} id=\\"1\\">
          <WithStyles(ForwardRef(Typography)) component=\\"div\\" role=\\"tabpanel\\" hidden={true} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
            <ForwardRef(Typography) classes={{...}} component=\\"div\\" role=\\"tabpanel\\" hidden={true} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
              <div className=\\"MuiTypography-root MuiTypography-body1\\" role=\\"tabpanel\\" hidden={true} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
                <span>
                  mockTab1Content
                </span>
              </div>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
        </TabPanelContainer>
        <TabPanelContainer isActive={true} id=\\"2\\">
          <WithStyles(ForwardRef(Typography)) component=\\"div\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-2\\" aria-labelledby=\\"panel-2\\">
            <ForwardRef(Typography) classes={{...}} component=\\"div\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-2\\" aria-labelledby=\\"panel-2\\">
              <div className=\\"MuiTypography-root MuiTypography-body1\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-2\\" aria-labelledby=\\"panel-2\\">
                <span>
                  mockTab2Content
                </span>
              </div>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
        </TabPanelContainer>
      </div>
    </ForwardRef(Paper)>
  </WithStyles(ForwardRef(Paper))>
</TabsWithPanels>"
`;

exports[`TabsWithPanels should render with minimal props 1`] = `
"<TabsWithPanels initialTab=\\"1\\" onTabChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} tabAndPanelPropsList={{...}} tabsAriaLabel=\\"mockTestAriaLabel\\">
  <WithStyles(ForwardRef(Paper))>
    <ForwardRef(Paper) classes={{...}}>
      <div className=\\"MuiPaper-root MuiPaper-elevation1 MuiPaper-rounded\\">
        <WithStyles(ForwardRef(Tabs)) value=\\"1\\" onChange={[Function: handleTabChange]} aria-label=\\"mockTestAriaLabel\\" style={{...}}>
          <ForwardRef(Tabs) classes={{...}} value=\\"1\\" onChange={[Function: handleTabChange]} aria-label=\\"mockTestAriaLabel\\" style={{...}}>
            <div className=\\"MuiTabs-root\\" style={{...}}>
              <div className=\\"MuiTabs-scroller MuiTabs-fixed\\" style={{...}} onScroll={[Function: debounced] { clear: [Function (anonymous)] }}>
                <div aria-label=\\"mockTestAriaLabel\\" aria-labelledby={[undefined]} className=\\"MuiTabs-flexContainer\\" onKeyDown={[Function: handleKeyDown]} role=\\"tablist\\">
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-1\\" aria-controls=\\"1\\" value=\\"1\\" fullWidth={false} indicator={false} selected={true} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-1\\" aria-controls=\\"1\\" value=\\"1\\" fullWidth={false} indicator={false} selected={true} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit Mui-selected\\" role=\\"tab\\" aria-selected={true} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={0} id=\\"tab-1\\" aria-controls=\\"1\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit Mui-selected\\" role=\\"tab\\" aria-selected={true} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={0} id=\\"tab-1\\" aria-controls=\\"1\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={0} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={true} id=\\"tab-1\\" aria-controls=\\"1\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-2\\" aria-controls=\\"2\\" value=\\"2\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-2\\" aria-controls=\\"2\\" value=\\"2\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-2\\" aria-controls=\\"2\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-2\\" aria-controls=\\"2\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={-1} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={false} id=\\"tab-2\\" aria-controls=\\"2\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                  <WithStyles(ForwardRef(Tab)) label=\\"mockTab1Label\\" id=\\"tab-3\\" aria-controls=\\"3\\" value=\\"3\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                    <ForwardRef(Tab) classes={{...}} label=\\"mockTab1Label\\" id=\\"tab-3\\" aria-controls=\\"3\\" value=\\"3\\" fullWidth={false} indicator={false} selected={false} selectionFollowsFocus={[undefined]} onChange={[Function: handleTabChange]} textColor=\\"inherit\\">
                      <WithStyles(ForwardRef(ButtonBase)) focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-3\\" aria-controls=\\"3\\">
                        <ForwardRef(ButtonBase) classes={{...}} focusRipple={true} className=\\"MuiTab-root MuiTab-textColorInherit\\" role=\\"tab\\" aria-selected={false} disabled={false} onClick={[Function: handleClick]} onFocus={[Function: handleFocus]} tabIndex={-1} id=\\"tab-3\\" aria-controls=\\"3\\">
                          <button className=\\"MuiButtonBase-root MuiTab-root MuiTab-textColorInherit\\" onBlur={[Function (anonymous)]} onClick={[Function: handleClick]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={-1} type=\\"button\\" disabled={false} role=\\"tab\\" aria-selected={false} id=\\"tab-3\\" aria-controls=\\"3\\">
                            <span className=\\"MuiTab-wrapper\\">
                              mockTab1Label
                            </span>
                            <WithStyles(memo) center={false}>
                              <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                <span className=\\"MuiTouchRipple-root\\">
                                  <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Tab)>
                  </WithStyles(ForwardRef(Tab))>
                </div>
                <WithStyles(ForwardRef(TabIndicator)) className=\\"MuiTabs-indicator\\" orientation=\\"horizontal\\" color=\\"secondary\\" style={{...}}>
                  <ForwardRef(TabIndicator) classes={{...}} className=\\"MuiTabs-indicator\\" orientation=\\"horizontal\\" color=\\"secondary\\" style={{...}}>
                    <span className=\\"PrivateTabIndicator-root-1 PrivateTabIndicator-colorSecondary-3 MuiTabs-indicator\\" style={{...}} />
                  </ForwardRef(TabIndicator)>
                </WithStyles(ForwardRef(TabIndicator))>
              </div>
            </div>
          </ForwardRef(Tabs)>
        </WithStyles(ForwardRef(Tabs))>
        <TabPanelContainer isActive={true} id=\\"1\\">
          <WithStyles(ForwardRef(Typography)) component=\\"div\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
            <ForwardRef(Typography) classes={{...}} component=\\"div\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
              <div className=\\"MuiTypography-root MuiTypography-body1\\" role=\\"tabpanel\\" hidden={false} id=\\"panel-1\\" aria-labelledby=\\"panel-1\\">
                <span>
                  mockTab1Content
                </span>
              </div>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
        </TabPanelContainer>
      </div>
    </ForwardRef(Paper)>
  </WithStyles(ForwardRef(Paper))>
</TabsWithPanels>"
`;
