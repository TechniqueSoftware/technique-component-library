// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectCustom should open menu on click 1`] = `
"<Fragment>
  <SelectWithNoMenu open={true} value=\\"mockValue\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select\\" onClick={[Function: handleOpenMenuClick]} />
  <WithStyles(ForwardRef(Popover)) open={true} anchorEl={{...}} onClose={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} id=\\"mockId-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
    <span>
      mockChildren
    </span>
  </WithStyles(ForwardRef(Popover))>
</Fragment>"
`;

exports[`SelectCustom should open menu on click: popoverProps 1`] = `
Object {
  "anchorEl": Object {
    "getBoundingClientRect": [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": Object {
            "height": "mockHeight",
          },
        },
      ],
    },
  },
  "anchorOrigin": Object {
    "horizontal": "left",
    "vertical": "mockHeight4",
  },
  "children": <span>
    mockChildren
  </span>,
  "id": "mockId-popover",
  "onClose": [MockFunction],
  "open": true,
  "transformOrigin": Object {
    "horizontal": "left",
    "vertical": "top",
  },
}
`;

exports[`SelectCustom should open menu on click: selectProps 1`] = `
Object {
  "disabled": false,
  "hideLabel": false,
  "id": "mockId-select",
  "label": "mockLabel",
  "maxWidth": 200,
  "onClick": [Function],
  "open": true,
  "value": "mockValue",
}
`;

exports[`SelectCustom should render with minimal props 1`] = `
"<Fragment>
  <SelectWithNoMenu open={true} value=\\"mockValue\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select\\" onClick={[Function: handleOpenMenuClick]} />
  <WithStyles(ForwardRef(Popover)) open={true} anchorEl={{...}} onClose={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} id=\\"mockId-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
    <span>
      mockChildren
    </span>
  </WithStyles(ForwardRef(Popover))>
</Fragment>"
`;

exports[`SelectCustom should render with minimal props: popoverProps 1`] = `
Object {
  "anchorEl": null,
  "anchorOrigin": Object {
    "horizontal": "left",
    "vertical": "bottom",
  },
  "children": <span>
    mockChildren
  </span>,
  "id": "mockId-popover",
  "onClose": [MockFunction],
  "open": true,
  "transformOrigin": Object {
    "horizontal": "left",
    "vertical": "top",
  },
}
`;

exports[`SelectCustom should render with minimal props: selectProps 1`] = `
Object {
  "disabled": false,
  "hideLabel": false,
  "id": "mockId-select",
  "label": "mockLabel",
  "maxWidth": 200,
  "onClick": [Function],
  "open": true,
  "value": "mockValue",
}
`;
