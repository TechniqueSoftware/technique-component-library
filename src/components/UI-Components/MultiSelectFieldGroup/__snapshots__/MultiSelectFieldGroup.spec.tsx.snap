// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiSelectFieldGroup should not show list when the selectAll value is selected 1`] = `""`;

exports[`MultiSelectFieldGroup should render radioGroup when showRadioGroup is true 1`] = `
"<ForwardRef(Grid) classes={{...}} item={true} xs={12}>
  <WithStyles(ForwardRef(FormControl)) component=\\"fieldset\\">
    <ForwardRef(RadioGroup) aria-label=\\"mockRadioGroupLabel\\" name=\\"mockRadioGroupName\\" value=\\"false\\" onChange={[Function: bound ]}>
      <WithStyles(ForwardRef(FormControlLabel)) control={{...}} label=\\"mockSelectSomeLabel\\" value=\\"true\\" name=\\"mockName\\" disabled={[undefined]} />
      <WithStyles(ForwardRef(FormControlLabel)) control={{...}} label=\\"mockSelectSomeLabel\\" value=\\"false\\" name=\\"mockName\\" disabled={[undefined]} />
    </ForwardRef(RadioGroup)>
  </WithStyles(ForwardRef(FormControl))>
</ForwardRef(Grid)>"
`;

exports[`MultiSelectFieldGroup should render with minimal baseProps 1`] = `
"<Fragment>
  <Styled(MuiBox) component=\\"fieldset\\" border=\\"none\\" p={0} m={0}>
    <WithStyles(ForwardRef(Typography)) variant=\\"srOnly\\" component=\\"span\\">
      <WithStyles(ForwardRef(FormLabel)) required={true} component=\\"legend\\">
        mockFieldsetLabelText
      </WithStyles(ForwardRef(FormLabel))>
    </WithStyles(ForwardRef(Typography))>
    <WithStyles(ForwardRef(Grid)) item={true} xs={12} />
    <ForwardRef(Fade) in={true}>
      <WithStyles(ForwardRef(Grid)) item={true} className=\\"mockSearchContainerClass\\">
        <WithStyles(ForwardRef(FormHelperText)) className=\\"\\">
          mockHelperText
        </WithStyles(ForwardRef(FormHelperText))>
        <WithStyles(MultiSelectSearchList) readOnly={[undefined]} error={false} groupValueWrapperList={{...}} multiSelectOptionGroupDataList={{...}} onCheckboxGroupChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} listContainerHeight={[undefined]} />
      </WithStyles(ForwardRef(Grid))>
    </ForwardRef(Fade)>
  </Styled(MuiBox)>
</Fragment>"
`;

exports[`MultiSelectFieldGroup should show list when the selectSome value is selected 1`] = `
"<WithStyles(ForwardRef(Grid)) item={true} className=\\"mockSearchContainerClass\\">
  <WithStyles(ForwardRef(FormHelperText)) className=\\"\\">
    mockHelperText
  </WithStyles(ForwardRef(FormHelperText))>
  <WithStyles(MultiSelectSearchList) readOnly={[undefined]} error={false} groupValueWrapperList={{...}} multiSelectOptionGroupDataList={{...}} onCheckboxGroupChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} listContainerHeight={[undefined]} />
</WithStyles(ForwardRef(Grid))>"
`;
