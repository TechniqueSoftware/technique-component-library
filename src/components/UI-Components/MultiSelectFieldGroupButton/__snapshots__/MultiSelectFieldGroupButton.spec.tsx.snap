// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiSelectFieldGroupButton should call onCheckboxGroupChange when pressing apply, passing the changed values 1`] = `
"<ThemeProvider theme={{...}}>
  <MultiSelectFieldGroupButton label=\\"mockLabel\\" id=\\"mockId\\" MultiSelectFieldGroupProps={{...}} allLabel=\\"Group\\" disabled={false} selectMaxWidth={200} applyButton={true} clearButton={true}>
    <SelectCustom disabled={false} label=\\"mockLabel\\" maxWidth={200} open={false} id=\\"mockId-select\\" value=\\"mockLabelString\\" onMenuOpen={[Function: handleOpenMenu]} onMenuClose={[Function: handleCancel]}>
      <SelectWithNoMenu open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]}>
        <Select open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}}>
          <TextField select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}}>
            <WithStyles(ForwardRef(TextField)) select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" disabled={false} label=\\"mockLabel\\" id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}} inputProps={{...}} InputProps={{...}}>
              <ForwardRef(TextField) classes={{...}} select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" disabled={false} label=\\"mockLabel\\" id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}} inputProps={{...}} InputProps={{...}}>
                <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root\\" disabled={false} error={false} fullWidth={false} hiddenLabel={[undefined]} required={false} color=\\"primary\\" variant=\\"outlined\\" margin=\\"dense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                  <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root\\" disabled={false} error={false} fullWidth={false} hiddenLabel={[undefined]} required={false} color=\\"primary\\" variant=\\"outlined\\" margin=\\"dense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                    <div className=\\"MuiFormControl-root MuiTextField-root MuiFormControl-marginDense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                      <WithStyles(ForwardRef(InputLabel)) htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                        <ForwardRef(InputLabel) classes={{...}} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                          <WithStyles(ForwardRef(FormLabel)) data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined\\" classes={{...}} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                            <ForwardRef(FormLabel) classes={{...}} data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined\\" htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                              <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined MuiFormLabel-filled\\" data-shrink={true} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                                mockLabel
                              </label>
                            </ForwardRef(FormLabel)>
                          </WithStyles(ForwardRef(FormLabel))>
                        </ForwardRef(InputLabel)>
                      </WithStyles(ForwardRef(InputLabel))>
                      <WithStyles(ForwardRef(Select)) aria-describedby={[undefined]} id=\\"mockId-select-select\\" labelId=\\"mockId-select-select-label\\" value=\\"mockLabelString\\" input={{...}} open={false} renderValue={[Function: renderValue]} MenuProps={{...}} style={{...}}>
                        <ForwardRef(Select) classes={{...}} aria-describedby={[undefined]} id=\\"mockId-select-select\\" labelId=\\"mockId-select-select-label\\" value=\\"mockLabelString\\" input={{...}} open={false} renderValue={[Function: renderValue]} MenuProps={{...}} style={{...}}>
                          <WithStyles(ForwardRef(OutlinedInput)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} fullWidth={false} multiline={false} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} type={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} label={{...}} labelWidth={0} inputComponent={{...}} style={{...}}>
                            <ForwardRef(OutlinedInput) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} fullWidth={false} multiline={false} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} type={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} label={{...}} labelWidth={0} inputComponent={{...}} style={{...}}>
                              <WithStyles(ForwardRef(InputBase)) renderSuffix={[Function: renderSuffix]} classes={{...}} fullWidth={false} inputComponent={{...}} multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} style={{...}}>
                                <ForwardRef(InputBase) classes={{...}} renderSuffix={[Function: renderSuffix]} fullWidth={false} inputComponent={{...}} multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} style={{...}}>
                                  <div className=\\"MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense\\" onClick={[Function: handleClick]} style={{...}}>
                                    <ForwardRef(SelectInput) aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} disabled={false} id={[undefined]} onAnimationStart={[Function: handleAutoFill]} name={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value=\\"mockLabelString\\" onKeyDown={[undefined]} onKeyUp={[undefined]} inputRef={[Function (anonymous)]} type={[undefined]} IconComponent={{...}} variant=\\"outlined\\" multiple={false} autoWidth={false} displayEmpty={false} labelId=\\"mockId-select-select-label\\" MenuProps={{...}} onClose={[undefined]} onOpen={[undefined]} open={false} renderValue={[Function: renderValue]} SelectDisplayProps={{...}} classes={{...}} min={[undefined]} max={[undefined]} className=\\"MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]}>
                                      <div className=\\"MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense\\" tabIndex={0} role=\\"button\\" aria-disabled={[undefined]} aria-expanded={[undefined]} aria-haspopup=\\"listbox\\" aria-label={[undefined]} aria-labelledby=\\"mockId-select-select-label mockId-select-select\\" onKeyDown={[Function: handleKeyDown]} onMouseDown={[Function: handleMouseDown]} onBlur={[Function: handleBlur]} onFocus={[Function: handleFocus]} id=\\"mockId-select-select\\">
                                        mockLabelString
                                      </div>
                                      <input value=\\"mockLabelString\\" name={[undefined]} aria-hidden={true} onChange={[Function: handleChange]} tabIndex={-1} className=\\"MuiSelect-nativeInput\\" autoFocus={false} aria-describedby={[undefined]} autoComplete={[undefined]} id={[undefined]} onAnimationStart={[Function: handleAutoFill]} placeholder={[undefined]} required={false} rows={[undefined]} onKeyDown={[undefined]} onKeyUp={[undefined]} min={[undefined]} max={[undefined]} />
                                      <ForwardRef(ArrowDropDownIcon) className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                        <WithStyles(ForwardRef(SvgIcon)) className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                          <ForwardRef(SvgIcon) classes={{...}} className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                            <svg className=\\"MuiSvgIcon-root MuiSelect-icon MuiSelect-iconOutlined\\" focusable=\\"false\\" viewBox=\\"0 0 24 24\\" color={[undefined]} aria-hidden={true} role={[undefined]}>
                                              <path d=\\"M7 10l5 5 5-5z\\" />
                                            </svg>
                                          </ForwardRef(SvgIcon)>
                                        </WithStyles(ForwardRef(SvgIcon))>
                                      </ForwardRef(ArrowDropDownIcon)>
                                      <WithStyles(ForwardRef(Menu)) id=\\"menu-\\" anchorEl={{...}} open={false} onClose={[Function: handleClose]} style={{...}} MenuListProps={{...}} PaperProps={{...}}>
                                        <ForwardRef(Menu) classes={{...}} id=\\"menu-\\" anchorEl={{...}} open={false} onClose={[Function: handleClose]} style={{...}} MenuListProps={{...}} PaperProps={{...}}>
                                          <WithStyles(ForwardRef(Popover)) getContentAnchorEl={[Function: getContentAnchorEl]} classes={[undefined]} onClose={[Function: handleClose]} TransitionProps={{...}} anchorOrigin={{...}} transformOrigin={{...}} PaperProps={{...}} open={false} transitionDuration=\\"auto\\" id=\\"menu-\\" anchorEl={{...}} style={{...}}>
                                            <ForwardRef(Popover) classes={{...}} getContentAnchorEl={[Function: getContentAnchorEl]} onClose={[Function: handleClose]} TransitionProps={{...}} anchorOrigin={{...}} transformOrigin={{...}} PaperProps={{...}} open={false} transitionDuration=\\"auto\\" id=\\"menu-\\" anchorEl={{...}} style={{...}}>
                                              <ForwardRef(Modal) container={{...}} open={false} BackdropProps={{...}} className=\\"MuiPopover-root\\" onClose={[Function: handleClose]} id=\\"menu-\\" style={{...}} />
                                            </ForwardRef(Popover)>
                                          </WithStyles(ForwardRef(Popover))>
                                        </ForwardRef(Menu)>
                                      </WithStyles(ForwardRef(Menu))>
                                    </ForwardRef(SelectInput)>
                                    <WithStyles(ForwardRef(NotchedOutline)) className=\\"MuiOutlinedInput-notchedOutline\\" label={{...}} labelWidth={0} notched={true}>
                                      <ForwardRef(NotchedOutline) classes={{...}} className=\\"MuiOutlinedInput-notchedOutline\\" label={{...}} labelWidth={0} notched={true}>
                                        <fieldset aria-hidden={true} className=\\"PrivateNotchedOutline-root-5 MuiOutlinedInput-notchedOutline\\" style={[undefined]}>
                                          <legend className=\\"PrivateNotchedOutline-legendLabelled-7 PrivateNotchedOutline-legendNotched-8\\">
                                            <span>
                                              mockLabel
                                            </span>
                                          </legend>
                                        </fieldset>
                                      </ForwardRef(NotchedOutline)>
                                    </WithStyles(ForwardRef(NotchedOutline))>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(OutlinedInput)>
                          </WithStyles(ForwardRef(OutlinedInput))>
                        </ForwardRef(Select)>
                      </WithStyles(ForwardRef(Select))>
                    </div>
                  </ForwardRef(FormControl)>
                </WithStyles(ForwardRef(FormControl))>
              </ForwardRef(TextField)>
            </WithStyles(ForwardRef(TextField))>
          </TextField>
        </Select>
      </SelectWithNoMenu>
      <WithStyles(ForwardRef(Popover)) open={false} anchorEl={{...}} onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
        <ForwardRef(Popover) classes={{...}} open={false} anchorEl={{...}} onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
          <ForwardRef(Modal) container={[undefined]} open={false} BackdropProps={{...}} className=\\"MuiPopover-root\\" onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" />
        </ForwardRef(Popover)>
      </WithStyles(ForwardRef(Popover))>
    </SelectCustom>
  </MultiSelectFieldGroupButton>
</ThemeProvider>"
`;

exports[`MultiSelectFieldGroupButton should handle the cancel click, closing the window and resetting the internal values to their original state: foo 1`] = `
"<ThemeProvider theme={{...}}>
  <MultiSelectFieldGroupButton label=\\"mockLabel\\" id=\\"mockId\\" MultiSelectFieldGroupProps={{...}} allLabel=\\"Group\\" disabled={false} selectMaxWidth={200} applyButton={true} clearButton={true}>
    <SelectCustom disabled={false} label=\\"mockLabel\\" maxWidth={200} open={false} id=\\"mockId-select\\" value=\\"mockLabelString\\" onMenuOpen={[Function: handleOpenMenu]} onMenuClose={[Function: handleCancel]}>
      <SelectWithNoMenu open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]}>
        <Select open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}}>
          <TextField select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" maxWidth={200} disabled={false} label=\\"mockLabel\\" hideLabel={false} id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}}>
            <WithStyles(ForwardRef(TextField)) select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" disabled={false} label=\\"mockLabel\\" id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}} inputProps={{...}} InputProps={{...}}>
              <ForwardRef(TextField) classes={{...}} select={true} InputLabelProps={{...}} margin=\\"dense\\" variant=\\"outlined\\" open={false} value=\\"mockLabelString\\" disabled={false} label=\\"mockLabel\\" id=\\"mockId-select-select\\" onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]} SelectProps={{...}} inputProps={{...}} InputProps={{...}}>
                <WithStyles(ForwardRef(FormControl)) className=\\"MuiTextField-root\\" disabled={false} error={false} fullWidth={false} hiddenLabel={[undefined]} required={false} color=\\"primary\\" variant=\\"outlined\\" margin=\\"dense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                  <ForwardRef(FormControl) classes={{...}} className=\\"MuiTextField-root\\" disabled={false} error={false} fullWidth={false} hiddenLabel={[undefined]} required={false} color=\\"primary\\" variant=\\"outlined\\" margin=\\"dense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                    <div className=\\"MuiFormControl-root MuiTextField-root MuiFormControl-marginDense\\" open={false} onClick={[Function: handleOpenMenuClick]} onKeyDown={[Function: handleKeyDown]}>
                      <WithStyles(ForwardRef(InputLabel)) htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                        <ForwardRef(InputLabel) classes={{...}} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                          <WithStyles(ForwardRef(FormLabel)) data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined\\" classes={{...}} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                            <ForwardRef(FormLabel) classes={{...}} data-shrink={true} className=\\"MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined\\" htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                              <label className=\\"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined MuiFormLabel-filled\\" data-shrink={true} htmlFor=\\"mockId-select-select\\" id=\\"mockId-select-select-label\\" style={{...}}>
                                mockLabel
                              </label>
                            </ForwardRef(FormLabel)>
                          </WithStyles(ForwardRef(FormLabel))>
                        </ForwardRef(InputLabel)>
                      </WithStyles(ForwardRef(InputLabel))>
                      <WithStyles(ForwardRef(Select)) aria-describedby={[undefined]} id=\\"mockId-select-select\\" labelId=\\"mockId-select-select-label\\" value=\\"mockLabelString\\" input={{...}} open={false} renderValue={[Function: renderValue]} MenuProps={{...}} style={{...}}>
                        <ForwardRef(Select) classes={{...}} aria-describedby={[undefined]} id=\\"mockId-select-select\\" labelId=\\"mockId-select-select-label\\" value=\\"mockLabelString\\" input={{...}} open={false} renderValue={[Function: renderValue]} MenuProps={{...}} style={{...}}>
                          <WithStyles(ForwardRef(OutlinedInput)) aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} fullWidth={false} multiline={false} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} type={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} label={{...}} labelWidth={0} inputComponent={{...}} style={{...}}>
                            <ForwardRef(OutlinedInput) classes={{...}} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} fullWidth={false} multiline={false} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} type={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} label={{...}} labelWidth={0} inputComponent={{...}} style={{...}}>
                              <WithStyles(ForwardRef(InputBase)) renderSuffix={[Function: renderSuffix]} classes={{...}} fullWidth={false} inputComponent={{...}} multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} style={{...}}>
                                <ForwardRef(InputBase) classes={{...}} renderSuffix={[Function: renderSuffix]} fullWidth={false} inputComponent={{...}} multiline={false} type=\\"text\\" aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} name={[undefined]} rows={[undefined]} rowsMax={[undefined]} maxRows={[undefined]} minRows={[undefined]} value=\\"mockLabelString\\" id={[undefined]} inputRef={[undefined]} onBlur={[undefined]} onChange={[undefined]} onFocus={[undefined]} placeholder={[undefined]} inputProps={{...}} style={{...}}>
                                  <div className=\\"MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense\\" onClick={[Function: handleClick]} style={{...}}>
                                    <ForwardRef(SelectInput) aria-invalid={false} aria-describedby={[undefined]} autoComplete={[undefined]} autoFocus={false} defaultValue={[undefined]} disabled={false} id={[undefined]} onAnimationStart={[Function: handleAutoFill]} name={[undefined]} placeholder={[undefined]} readOnly={[undefined]} required={false} rows={[undefined]} value=\\"mockLabelString\\" onKeyDown={[undefined]} onKeyUp={[undefined]} inputRef={[Function (anonymous)]} type={[undefined]} IconComponent={{...}} variant=\\"outlined\\" multiple={false} autoWidth={false} displayEmpty={false} labelId=\\"mockId-select-select-label\\" MenuProps={{...}} onClose={[undefined]} onOpen={[undefined]} open={false} renderValue={[Function: renderValue]} SelectDisplayProps={{...}} classes={{...}} min={[undefined]} max={[undefined]} className=\\"MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense\\" onBlur={[Function: handleBlur]} onChange={[Function: handleChange]} onFocus={[Function: handleFocus]}>
                                      <div className=\\"MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiSelect-outlined MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense\\" tabIndex={0} role=\\"button\\" aria-disabled={[undefined]} aria-expanded={[undefined]} aria-haspopup=\\"listbox\\" aria-label={[undefined]} aria-labelledby=\\"mockId-select-select-label mockId-select-select\\" onKeyDown={[Function: handleKeyDown]} onMouseDown={[Function: handleMouseDown]} onBlur={[Function: handleBlur]} onFocus={[Function: handleFocus]} id=\\"mockId-select-select\\">
                                        mockLabelString
                                      </div>
                                      <input value=\\"mockLabelString\\" name={[undefined]} aria-hidden={true} onChange={[Function: handleChange]} tabIndex={-1} className=\\"MuiSelect-nativeInput\\" autoFocus={false} aria-describedby={[undefined]} autoComplete={[undefined]} id={[undefined]} onAnimationStart={[Function: handleAutoFill]} placeholder={[undefined]} required={false} rows={[undefined]} onKeyDown={[undefined]} onKeyUp={[undefined]} min={[undefined]} max={[undefined]} />
                                      <ForwardRef(ArrowDropDownIcon) className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                        <WithStyles(ForwardRef(SvgIcon)) className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                          <ForwardRef(SvgIcon) classes={{...}} className=\\"MuiSelect-icon MuiSelect-iconOutlined\\">
                                            <svg className=\\"MuiSvgIcon-root MuiSelect-icon MuiSelect-iconOutlined\\" focusable=\\"false\\" viewBox=\\"0 0 24 24\\" color={[undefined]} aria-hidden={true} role={[undefined]}>
                                              <path d=\\"M7 10l5 5 5-5z\\" />
                                            </svg>
                                          </ForwardRef(SvgIcon)>
                                        </WithStyles(ForwardRef(SvgIcon))>
                                      </ForwardRef(ArrowDropDownIcon)>
                                      <WithStyles(ForwardRef(Menu)) id=\\"menu-\\" anchorEl={{...}} open={false} onClose={[Function: handleClose]} style={{...}} MenuListProps={{...}} PaperProps={{...}}>
                                        <ForwardRef(Menu) classes={{...}} id=\\"menu-\\" anchorEl={{...}} open={false} onClose={[Function: handleClose]} style={{...}} MenuListProps={{...}} PaperProps={{...}}>
                                          <WithStyles(ForwardRef(Popover)) getContentAnchorEl={[Function: getContentAnchorEl]} classes={[undefined]} onClose={[Function: handleClose]} TransitionProps={{...}} anchorOrigin={{...}} transformOrigin={{...}} PaperProps={{...}} open={false} transitionDuration=\\"auto\\" id=\\"menu-\\" anchorEl={{...}} style={{...}}>
                                            <ForwardRef(Popover) classes={{...}} getContentAnchorEl={[Function: getContentAnchorEl]} onClose={[Function: handleClose]} TransitionProps={{...}} anchorOrigin={{...}} transformOrigin={{...}} PaperProps={{...}} open={false} transitionDuration=\\"auto\\" id=\\"menu-\\" anchorEl={{...}} style={{...}}>
                                              <ForwardRef(Modal) container={{...}} open={false} BackdropProps={{...}} className=\\"MuiPopover-root\\" onClose={[Function: handleClose]} id=\\"menu-\\" style={{...}} />
                                            </ForwardRef(Popover)>
                                          </WithStyles(ForwardRef(Popover))>
                                        </ForwardRef(Menu)>
                                      </WithStyles(ForwardRef(Menu))>
                                    </ForwardRef(SelectInput)>
                                    <WithStyles(ForwardRef(NotchedOutline)) className=\\"MuiOutlinedInput-notchedOutline\\" label={{...}} labelWidth={0} notched={true}>
                                      <ForwardRef(NotchedOutline) classes={{...}} className=\\"MuiOutlinedInput-notchedOutline\\" label={{...}} labelWidth={0} notched={true}>
                                        <fieldset aria-hidden={true} className=\\"PrivateNotchedOutline-root-5 MuiOutlinedInput-notchedOutline\\" style={[undefined]}>
                                          <legend className=\\"PrivateNotchedOutline-legendLabelled-7 PrivateNotchedOutline-legendNotched-8\\">
                                            <span>
                                              mockLabel
                                            </span>
                                          </legend>
                                        </fieldset>
                                      </ForwardRef(NotchedOutline)>
                                    </WithStyles(ForwardRef(NotchedOutline))>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(OutlinedInput)>
                          </WithStyles(ForwardRef(OutlinedInput))>
                        </ForwardRef(Select)>
                      </WithStyles(ForwardRef(Select))>
                    </div>
                  </ForwardRef(FormControl)>
                </WithStyles(ForwardRef(FormControl))>
              </ForwardRef(TextField)>
            </WithStyles(ForwardRef(TextField))>
          </TextField>
        </Select>
      </SelectWithNoMenu>
      <WithStyles(ForwardRef(Popover)) open={false} anchorEl={{...}} onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
        <ForwardRef(Popover) classes={{...}} open={false} anchorEl={{...}} onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" anchorOrigin={{...}} transformOrigin={{...}}>
          <ForwardRef(Modal) container={[undefined]} open={false} BackdropProps={{...}} className=\\"MuiPopover-root\\" onClose={[Function: handleCancel]} id=\\"mockId-select-popover\\" />
        </ForwardRef(Popover)>
      </WithStyles(ForwardRef(Popover))>
    </SelectCustom>
  </MultiSelectFieldGroupButton>
</ThemeProvider>"
`;

exports[`MultiSelectFieldGroupButton should render with minimal props 1`] = `
"<SelectCustom disabled={false} label=\\"mockLabel\\" maxWidth={200} open={false} id=\\"mockId-select\\" value=\\"\\" onMenuOpen={[Function: handleOpenMenu]} onMenuClose={[Function: handleCancel]}>
  <WithStyles(MultiSelectFieldGroup) groupValueWrapperList={{...}} listContainerHeight={666} multiSelectOptionGroupDataList={{...}} onCheckboxGroupChange={[Function: handleInternalCheckboxGroupChange]} onRadioGroupChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} radioGroupProps={{...}} readOnly={false} classes={{...}} showMultiSelectSearchList={true} showHelperText={false} />
  <WithStyles(ForwardRef(DialogActions))>
    <ButtonWithIcon id=\\"mockId-clear-button\\" onClick={[Function: handleClear]} variant=\\"text\\" disabled={false}>
      Clear
    </ButtonWithIcon>
    <ButtonWithIcon id=\\"mockId-apply-button\\" onClick={[Function: handleApply]} color=\\"primary\\">
      Apply
    </ButtonWithIcon>
  </WithStyles(ForwardRef(DialogActions))>
</SelectCustom>"
`;
