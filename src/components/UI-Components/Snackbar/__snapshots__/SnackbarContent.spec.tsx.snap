// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnackbarContent should render with all props 1`] = `
"<ForwardRef id=\\"mockId\\" aria-describe-id=\\"id-9247924\\" variant=\\"info\\" maxWidth={500} message=\\"Mock Archived\\" onUndo={[Function: onUndo]} onClose={[Function: onClose]}>
  <div id=\\"mockId\\">
    <Styled(MuiBox) maxWidth={500}>
      <div className=\\"MuiBox-root MuiBox-root-3\\">
        <WithStyles(ForwardRef(SnackbarContent)) className=\\"\\" aria-describedby=\\"id-9247924\\" message={{...}} action={{...}}>
          <ForwardRef(SnackbarContent) classes={{...}} className=\\"\\" aria-describedby=\\"id-9247924\\" message={{...}} action={{...}}>
            <WithStyles(ForwardRef(Paper)) role=\\"alert\\" square={true} elevation={6} className=\\"MuiSnackbarContent-root\\" aria-describedby=\\"id-9247924\\">
              <ForwardRef(Paper) classes={{...}} role=\\"alert\\" square={true} elevation={6} className=\\"MuiSnackbarContent-root\\" aria-describedby=\\"id-9247924\\">
                <div className=\\"MuiPaper-root MuiSnackbarContent-root MuiPaper-elevation6\\" role=\\"alert\\" aria-describedby=\\"id-9247924\\">
                  <div className=\\"MuiSnackbarContent-message\\">
                    <span id=\\"id-9247924\\" className={{...}}>
                      <WithStyles(memo) className=\\"fontSize opacity\\">
                        <ForwardRef(InfoIcon) classes={{...}} className=\\"fontSize opacity\\">
                          <WithStyles(ForwardRef(SvgIcon)) classes={{...}} className=\\"fontSize opacity\\">
                            <ForwardRef(SvgIcon) classes={{...}} className=\\"fontSize opacity\\">
                              <svg className=\\"MuiSvgIcon-root memo-root-2 fontSize opacity\\" focusable=\\"false\\" viewBox=\\"0 0 24 24\\" color={[undefined]} aria-hidden={true} role={[undefined]}>
                                <path d=\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\\" />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef(InfoIcon)>
                      </WithStyles(memo)>
                      Mock Archived
                    </span>
                  </div>
                  <div className=\\"MuiSnackbarContent-action\\">
                    <SnackbarAction onClose={[Function: onClose]} onUndo={[Function: onUndo]}>
                      <WithStyles(ForwardRef(Button)) color=\\"primary\\" size=\\"small\\" onClick={[Function: onUndo]}>
                        <ForwardRef(Button) classes={{...}} color=\\"primary\\" size=\\"small\\" onClick={[Function: onUndo]}>
                          <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: onUndo]}>
                            <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: onUndo]}>
                              <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" onBlur={[Function (anonymous)]} onClick={[Function: onUndo]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={0} type=\\"button\\" disabled={false}>
                                <span className=\\"MuiButton-label\\">
                                  Undo
                                </span>
                                <WithStyles(memo) center={false}>
                                  <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                    <span className=\\"MuiTouchRipple-root\\">
                                      <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                      <WithStyles(ForwardRef(IconButton)) aria-label=\\"Close\\" color=\\"inherit\\" onClick={[Function: onClose]}>
                        <ForwardRef(IconButton) classes={{...}} aria-label=\\"Close\\" color=\\"inherit\\" onClick={[Function: onClose]}>
                          <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiIconButton-root MuiIconButton-colorInherit\\" centerRipple={true} focusRipple={true} disabled={false} aria-label=\\"Close\\" onClick={[Function: onClose]}>
                            <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiIconButton-root MuiIconButton-colorInherit\\" centerRipple={true} focusRipple={true} disabled={false} aria-label=\\"Close\\" onClick={[Function: onClose]}>
                              <button className=\\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\\" onBlur={[Function (anonymous)]} onClick={[Function: onClose]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={0} type=\\"button\\" disabled={false} aria-label=\\"Close\\">
                                <span className=\\"MuiIconButton-label\\">
                                  <ForwardRef(CloseIcon) className={{...}}>
                                    <WithStyles(ForwardRef(SvgIcon)) className={{...}}>
                                      <ForwardRef(SvgIcon) classes={{...}} className={{...}}>
                                        <svg className=\\"MuiSvgIcon-root fontSize\\" focusable=\\"false\\" viewBox=\\"0 0 24 24\\" color={[undefined]} aria-hidden={true} role={[undefined]}>
                                          <path d=\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\" />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(CloseIcon)>
                                </span>
                                <WithStyles(memo) center={true}>
                                  <ForwardRef(TouchRipple) classes={{...}} center={true}>
                                    <span className=\\"MuiTouchRipple-root\\">
                                      <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(IconButton)>
                      </WithStyles(ForwardRef(IconButton))>
                    </SnackbarAction>
                  </div>
                </div>
              </ForwardRef(Paper)>
            </WithStyles(ForwardRef(Paper))>
          </ForwardRef(SnackbarContent)>
        </WithStyles(ForwardRef(SnackbarContent))>
      </div>
    </Styled(MuiBox)>
  </div>
</ForwardRef>"
`;

exports[`SnackbarContent should render with minimal 1`] = `
"<ForwardRef id=\\"mockId\\" message=\\"Mock message\\" variant=\\"info\\" aria-describe-id=\\"id-9247924\\" onUndo={[Function: onUndo]}>
  <div id=\\"mockId\\">
    <Styled(MuiBox) maxWidth={400}>
      <div className=\\"MuiBox-root MuiBox-root-1\\">
        <WithStyles(ForwardRef(SnackbarContent)) className=\\"\\" aria-describedby=\\"id-9247924\\" message={{...}} action={{...}}>
          <ForwardRef(SnackbarContent) classes={{...}} className=\\"\\" aria-describedby=\\"id-9247924\\" message={{...}} action={{...}}>
            <WithStyles(ForwardRef(Paper)) role=\\"alert\\" square={true} elevation={6} className=\\"MuiSnackbarContent-root\\" aria-describedby=\\"id-9247924\\">
              <ForwardRef(Paper) classes={{...}} role=\\"alert\\" square={true} elevation={6} className=\\"MuiSnackbarContent-root\\" aria-describedby=\\"id-9247924\\">
                <div className=\\"MuiPaper-root MuiSnackbarContent-root MuiPaper-elevation6\\" role=\\"alert\\" aria-describedby=\\"id-9247924\\">
                  <div className=\\"MuiSnackbarContent-message\\">
                    <span id=\\"id-9247924\\" className={{...}}>
                      <WithStyles(memo) className=\\"fontSize opacity\\">
                        <ForwardRef(InfoIcon) classes={{...}} className=\\"fontSize opacity\\">
                          <WithStyles(ForwardRef(SvgIcon)) classes={{...}} className=\\"fontSize opacity\\">
                            <ForwardRef(SvgIcon) classes={{...}} className=\\"fontSize opacity\\">
                              <svg className=\\"MuiSvgIcon-root memo-root-2 fontSize opacity\\" focusable=\\"false\\" viewBox=\\"0 0 24 24\\" color={[undefined]} aria-hidden={true} role={[undefined]}>
                                <path d=\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\\" />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef(InfoIcon)>
                      </WithStyles(memo)>
                      Mock message
                    </span>
                  </div>
                  <div className=\\"MuiSnackbarContent-action\\">
                    <SnackbarAction onClose={[undefined]} onUndo={[Function: onUndo]}>
                      <WithStyles(ForwardRef(Button)) color=\\"primary\\" size=\\"small\\" onClick={[Function: onUndo]}>
                        <ForwardRef(Button) classes={{...}} color=\\"primary\\" size=\\"small\\" onClick={[Function: onUndo]}>
                          <WithStyles(ForwardRef(ButtonBase)) className=\\"MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: onUndo]}>
                            <ForwardRef(ButtonBase) classes={{...}} className=\\"MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" component=\\"button\\" disabled={false} focusRipple={true} focusVisibleClassName=\\"Mui-focusVisible\\" type=\\"button\\" onClick={[Function: onUndo]}>
                              <button className=\\"MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall\\" onBlur={[Function (anonymous)]} onClick={[Function: onUndo]} onFocus={[Function (anonymous)]} onKeyDown={[Function (anonymous)]} onKeyUp={[Function (anonymous)]} onMouseDown={[Function (anonymous)]} onMouseLeave={[Function (anonymous)]} onMouseUp={[Function (anonymous)]} onDragLeave={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} onTouchMove={[Function (anonymous)]} onTouchStart={[Function (anonymous)]} tabIndex={0} type=\\"button\\" disabled={false}>
                                <span className=\\"MuiButton-label\\">
                                  Undo
                                </span>
                                <WithStyles(memo) center={false}>
                                  <ForwardRef(TouchRipple) classes={{...}} center={false}>
                                    <span className=\\"MuiTouchRipple-root\\">
                                      <TransitionGroup component={{...}} exit={true} childFactory={[Function: childFactory]} />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                    </SnackbarAction>
                  </div>
                </div>
              </ForwardRef(Paper)>
            </WithStyles(ForwardRef(Paper))>
          </ForwardRef(SnackbarContent)>
        </WithStyles(ForwardRef(SnackbarContent))>
      </div>
    </Styled(MuiBox)>
  </div>
</ForwardRef>"
`;
