// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EnhancedTable should handle select all when called by enhancedTableHead and checked is false, returning no rows 1`] = `
Array [
  Array [
    Set {},
  ],
]
`;

exports[`EnhancedTable should handle select all when called by enhancedTableHead and checked is true, returning all of the rows 1`] = `
Array [
  Array [
    Set {
      "row-1",
      "row-2",
    },
  ],
]
`;

exports[`EnhancedTable should handle sorting when called by enhancedTableHead, returning the id and order direction 1`] = `
Array [
  Array [
    Object {
      "mockEvent": true,
    },
    "mockPropertyId",
    "desc",
  ],
]
`;

exports[`EnhancedTable should handle table pagination event handlers 1`] = `Array []`;

exports[`EnhancedTable should handle table pagination event handlers 2`] = `
Array [
  Array [
    Object {
      "mockChangeRowsPerPageEvent": true,
    },
  ],
]
`;

exports[`EnhancedTable should render with minimal props 1`] = `
"<div className=\\"position width marginTop\\">
  <WithStyles(ForwardRef(Paper)) className={{...}}>
    <div className={{...}}>
      <WithStyles(ForwardRef(Table)) className={{...}} aria-labelledby=\\"tableTitle\\" size=\\"medium\\">
        <EnhancedTableHead data-test=\\"enhanced-table-head\\" headerCellProps={{...}} enableSelectableRows={false} numSelected={0} order={[undefined]} orderBy=\\"foo\\" onSelectAllClick={[Function: handleSelectAllClick]} onRequestSort={[Function: handleRequestSort]} rowCount={2} />
        <WithStyles(ForwardRef(TableBody))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-1\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"right\\" size=\\"medium\\">
              <span>
                cell1
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-2\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"left\\" size=\\"medium\\">
              <span>
                cell2
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) style={{...}}>
            <WithStyles(ForwardRef(TableCell)) colSpan={2} />
          </WithStyles(ForwardRef(TableRow))>
        </WithStyles(ForwardRef(TableBody))>
      </WithStyles(ForwardRef(Table))>
    </div>
    <WithStyles(ForwardRef(TablePagination)) data-test=\\"table-pagination\\" rowsPerPageOptions={{...}} component=\\"div\\" count={0} rowsPerPage={5} page={1} backIconButtonProps={{...}} nextIconButtonProps={{...}} onPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRowsPerPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} />
  </WithStyles(ForwardRef(Paper))>
</div>"
`;

exports[`EnhancedTable should show EnhancedToolbar when tableTitle exists 1`] = `
"<div className=\\"position width marginTop\\">
  <WithStyles(ForwardRef(Paper)) className={{...}}>
    <EnhancedTableToolbar numSelected={0} tableTitle=\\"TestTableTitle\\" />
    <div className={{...}}>
      <WithStyles(ForwardRef(Table)) className={{...}} aria-labelledby=\\"tableTitle\\" size=\\"medium\\">
        <EnhancedTableHead data-test=\\"enhanced-table-head\\" headerCellProps={{...}} enableSelectableRows={false} numSelected={0} order={[undefined]} orderBy=\\"foo\\" onSelectAllClick={[Function: handleSelectAllClick]} onRequestSort={[Function: handleRequestSort]} rowCount={2} />
        <WithStyles(ForwardRef(TableBody))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-1\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"right\\" size=\\"medium\\">
              <span>
                cell1
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-2\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"left\\" size=\\"medium\\">
              <span>
                cell2
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) style={{...}}>
            <WithStyles(ForwardRef(TableCell)) colSpan={2} />
          </WithStyles(ForwardRef(TableRow))>
        </WithStyles(ForwardRef(TableBody))>
      </WithStyles(ForwardRef(Table))>
    </div>
    <WithStyles(ForwardRef(TablePagination)) data-test=\\"table-pagination\\" rowsPerPageOptions={{...}} component=\\"div\\" count={0} rowsPerPage={5} page={1} backIconButtonProps={{...}} nextIconButtonProps={{...}} onPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRowsPerPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} />
  </WithStyles(ForwardRef(Paper))>
</div>"
`;

exports[`EnhancedTable should show EnhancedToolbar when there are selected items 1`] = `
"<div className=\\"position width marginTop\\">
  <WithStyles(ForwardRef(Paper)) className={{...}}>
    <EnhancedTableToolbar numSelected={5} tableTitle=\\"\\" />
    <div className={{...}}>
      <WithStyles(ForwardRef(Table)) className={{...}} aria-labelledby=\\"tableTitle\\" size=\\"medium\\">
        <EnhancedTableHead data-test=\\"enhanced-table-head\\" headerCellProps={{...}} enableSelectableRows={false} numSelected={5} order={[undefined]} orderBy=\\"foo\\" onSelectAllClick={[Function: handleSelectAllClick]} onRequestSort={[Function: handleRequestSort]} rowCount={2} />
        <WithStyles(ForwardRef(TableBody))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-1\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"right\\" size=\\"medium\\">
              <span>
                cell1
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) onClick={{...}} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-2\\">
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"left\\" size=\\"medium\\">
              <span>
                cell2
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) style={{...}}>
            <WithStyles(ForwardRef(TableCell)) colSpan={2} />
          </WithStyles(ForwardRef(TableRow))>
        </WithStyles(ForwardRef(TableBody))>
      </WithStyles(ForwardRef(Table))>
    </div>
    <WithStyles(ForwardRef(TablePagination)) data-test=\\"table-pagination\\" rowsPerPageOptions={{...}} component=\\"div\\" count={0} rowsPerPage={5} page={1} backIconButtonProps={{...}} nextIconButtonProps={{...}} onPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRowsPerPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} />
  </WithStyles(ForwardRef(Paper))>
</div>"
`;

exports[`EnhancedTable should show inputs headers when enableSelectableRows is true and onClick should call handler 1`] = `
"<div className=\\"position width marginTop\\">
  <WithStyles(ForwardRef(Paper)) className={{...}}>
    <div className={{...}}>
      <WithStyles(ForwardRef(Table)) className={{...}} aria-labelledby=\\"tableTitle\\" size=\\"medium\\">
        <EnhancedTableHead data-test=\\"enhanced-table-head\\" headerCellProps={{...}} enableSelectableRows={true} numSelected={0} order={[undefined]} orderBy=\\"foo\\" onSelectAllClick={[Function: handleSelectAllClick]} onRequestSort={[Function: handleRequestSort]} rowCount={2} />
        <WithStyles(ForwardRef(TableBody))>
          <WithStyles(ForwardRef(TableRow)) onClick={[Function (anonymous)]} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-1\\">
            <WithStyles(ForwardRef(TableCell)) padding=\\"checkbox\\">
              <Checkbox checked={false} inputProps={{...}} />
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"right\\" size=\\"medium\\">
              <span>
                cell1
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) onClick={[Function (anonymous)]} hover={true} role=\\"checkbox\\" aria-checked={false} tabIndex={-1} data-test=\\"checkbox-row-id-row-2\\">
            <WithStyles(ForwardRef(TableCell)) padding=\\"checkbox\\">
              <Checkbox checked={false} inputProps={{...}} />
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell)) colSpan={1} align=\\"left\\" size=\\"medium\\">
              <span>
                cell2
              </span>
            </WithStyles(ForwardRef(TableCell))>
          </WithStyles(ForwardRef(TableRow))>
          <WithStyles(ForwardRef(TableRow)) style={{...}}>
            <WithStyles(ForwardRef(TableCell)) colSpan={2} />
          </WithStyles(ForwardRef(TableRow))>
        </WithStyles(ForwardRef(TableBody))>
      </WithStyles(ForwardRef(Table))>
    </div>
    <WithStyles(ForwardRef(TablePagination)) data-test=\\"table-pagination\\" rowsPerPageOptions={{...}} component=\\"div\\" count={0} rowsPerPage={5} page={1} backIconButtonProps={{...}} nextIconButtonProps={{...}} onPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} onRowsPerPageChange={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} />
  </WithStyles(ForwardRef(Paper))>
</div>"
`;
